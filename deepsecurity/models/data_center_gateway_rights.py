# coding: utf-8

"""
    Trend Micro Workload Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 50.0.810
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataCenterGatewayRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_create_new_data_center_gateways': 'bool',
        'can_view_data_center_gateways': 'bool',
        'can_edit_data_center_gateways': 'bool',
        'can_delete_data_center_gateways': 'bool'
    }

    attribute_map = {
        'can_create_new_data_center_gateways': 'canCreateNewDataCenterGateways',
        'can_view_data_center_gateways': 'canViewDataCenterGateways',
        'can_edit_data_center_gateways': 'canEditDataCenterGateways',
        'can_delete_data_center_gateways': 'canDeleteDataCenterGateways'
    }

    def __init__(self, can_create_new_data_center_gateways=None, can_view_data_center_gateways=None, can_edit_data_center_gateways=None, can_delete_data_center_gateways=None):  # noqa: E501
        """DataCenterGatewayRights - a model defined in Swagger"""  # noqa: E501

        self._can_create_new_data_center_gateways = None
        self._can_view_data_center_gateways = None
        self._can_edit_data_center_gateways = None
        self._can_delete_data_center_gateways = None
        self.discriminator = None

        if can_create_new_data_center_gateways is not None:
            self.can_create_new_data_center_gateways = can_create_new_data_center_gateways
        if can_view_data_center_gateways is not None:
            self.can_view_data_center_gateways = can_view_data_center_gateways
        if can_edit_data_center_gateways is not None:
            self.can_edit_data_center_gateways = can_edit_data_center_gateways
        if can_delete_data_center_gateways is not None:
            self.can_delete_data_center_gateways = can_delete_data_center_gateways

    @property
    def can_create_new_data_center_gateways(self):
        """Gets the can_create_new_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501

        Right to create new data center gateways.  # noqa: E501

        :return: The can_create_new_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_new_data_center_gateways

    @can_create_new_data_center_gateways.setter
    def can_create_new_data_center_gateways(self, can_create_new_data_center_gateways):
        """Sets the can_create_new_data_center_gateways of this DataCenterGatewayRights.

        Right to create new data center gateways.  # noqa: E501

        :param can_create_new_data_center_gateways: The can_create_new_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501
        :type: bool
        """

        self._can_create_new_data_center_gateways = can_create_new_data_center_gateways

    @property
    def can_view_data_center_gateways(self):
        """Gets the can_view_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501

        Right to view data center gateways.  # noqa: E501

        :return: The can_view_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_view_data_center_gateways

    @can_view_data_center_gateways.setter
    def can_view_data_center_gateways(self, can_view_data_center_gateways):
        """Sets the can_view_data_center_gateways of this DataCenterGatewayRights.

        Right to view data center gateways.  # noqa: E501

        :param can_view_data_center_gateways: The can_view_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501
        :type: bool
        """

        self._can_view_data_center_gateways = can_view_data_center_gateways

    @property
    def can_edit_data_center_gateways(self):
        """Gets the can_edit_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501

        Right to edit data center gateways.  # noqa: E501

        :return: The can_edit_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_data_center_gateways

    @can_edit_data_center_gateways.setter
    def can_edit_data_center_gateways(self, can_edit_data_center_gateways):
        """Sets the can_edit_data_center_gateways of this DataCenterGatewayRights.

        Right to edit data center gateways.  # noqa: E501

        :param can_edit_data_center_gateways: The can_edit_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501
        :type: bool
        """

        self._can_edit_data_center_gateways = can_edit_data_center_gateways

    @property
    def can_delete_data_center_gateways(self):
        """Gets the can_delete_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501

        Right to delete data center gateways.  # noqa: E501

        :return: The can_delete_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_data_center_gateways

    @can_delete_data_center_gateways.setter
    def can_delete_data_center_gateways(self, can_delete_data_center_gateways):
        """Sets the can_delete_data_center_gateways of this DataCenterGatewayRights.

        Right to delete data center gateways.  # noqa: E501

        :param can_delete_data_center_gateways: The can_delete_data_center_gateways of this DataCenterGatewayRights.  # noqa: E501
        :type: bool
        """

        self._can_delete_data_center_gateways = can_delete_data_center_gateways

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataCenterGatewayRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCenterGatewayRights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

