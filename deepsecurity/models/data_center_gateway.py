# coding: utf-8

"""
    Trend Micro Workload Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 50.0.810
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataCenterGateway(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'public_key': 'str',
        'gateway_resource': 'str',
        'endpoint': 'str',
        'cloud_one_account_id': 'str',
        'created': 'int',
        'last_modified': 'int',
        'certificate': 'str',
        'private_key': 'str',
        'root_ca': 'str',
        'id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'public_key': 'publicKey',
        'gateway_resource': 'gatewayResource',
        'endpoint': 'endpoint',
        'cloud_one_account_id': 'cloudOneAccountID',
        'created': 'created',
        'last_modified': 'lastModified',
        'certificate': 'certificate',
        'private_key': 'privateKey',
        'root_ca': 'rootCA',
        'id': 'ID'
    }

    def __init__(self, name=None, public_key=None, gateway_resource=None, endpoint=None, cloud_one_account_id=None, created=None, last_modified=None, certificate=None, private_key=None, root_ca=None, id=None):  # noqa: E501
        """DataCenterGateway - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._public_key = None
        self._gateway_resource = None
        self._endpoint = None
        self._cloud_one_account_id = None
        self._created = None
        self._last_modified = None
        self._certificate = None
        self._private_key = None
        self._root_ca = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if public_key is not None:
            self.public_key = public_key
        if gateway_resource is not None:
            self.gateway_resource = gateway_resource
        if endpoint is not None:
            self.endpoint = endpoint
        if cloud_one_account_id is not None:
            self.cloud_one_account_id = cloud_one_account_id
        if created is not None:
            self.created = created
        if last_modified is not None:
            self.last_modified = last_modified
        if certificate is not None:
            self.certificate = certificate
        if private_key is not None:
            self.private_key = private_key
        if root_ca is not None:
            self.root_ca = root_ca
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this DataCenterGateway.  # noqa: E501

        Data center gateway's display name.  # noqa: E501

        :return: The name of this DataCenterGateway.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataCenterGateway.

        Data center gateway's display name.  # noqa: E501

        :param name: The name of this DataCenterGateway.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def public_key(self):
        """Gets the public_key of this DataCenterGateway.  # noqa: E501

        Public key of the data center gateway.  # noqa: E501

        :return: The public_key of this DataCenterGateway.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this DataCenterGateway.

        Public key of the data center gateway.  # noqa: E501

        :param public_key: The public_key of this DataCenterGateway.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def gateway_resource(self):
        """Gets the gateway_resource of this DataCenterGateway.  # noqa: E501

        Resource name of data center gateway.  # noqa: E501

        :return: The gateway_resource of this DataCenterGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_resource

    @gateway_resource.setter
    def gateway_resource(self, gateway_resource):
        """Sets the gateway_resource of this DataCenterGateway.

        Resource name of data center gateway.  # noqa: E501

        :param gateway_resource: The gateway_resource of this DataCenterGateway.  # noqa: E501
        :type: str
        """

        self._gateway_resource = gateway_resource

    @property
    def endpoint(self):
        """Gets the endpoint of this DataCenterGateway.  # noqa: E501

        Control endpoint for the data center gateway service.  # noqa: E501

        :return: The endpoint of this DataCenterGateway.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this DataCenterGateway.

        Control endpoint for the data center gateway service.  # noqa: E501

        :param endpoint: The endpoint of this DataCenterGateway.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def cloud_one_account_id(self):
        """Gets the cloud_one_account_id of this DataCenterGateway.  # noqa: E501

        Cloud One account ID.  # noqa: E501

        :return: The cloud_one_account_id of this DataCenterGateway.  # noqa: E501
        :rtype: str
        """
        return self._cloud_one_account_id

    @cloud_one_account_id.setter
    def cloud_one_account_id(self, cloud_one_account_id):
        """Sets the cloud_one_account_id of this DataCenterGateway.

        Cloud One account ID.  # noqa: E501

        :param cloud_one_account_id: The cloud_one_account_id of this DataCenterGateway.  # noqa: E501
        :type: str
        """

        self._cloud_one_account_id = cloud_one_account_id

    @property
    def created(self):
        """Gets the created of this DataCenterGateway.  # noqa: E501

        Timestamp of the creation of the data center gateway, in milliseconds since epoch.  # noqa: E501

        :return: The created of this DataCenterGateway.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DataCenterGateway.

        Timestamp of the creation of the data center gateway, in milliseconds since epoch.  # noqa: E501

        :param created: The created of this DataCenterGateway.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def last_modified(self):
        """Gets the last_modified of this DataCenterGateway.  # noqa: E501

        Timestamp of the last updated to the data center gateway, in milliseconds since epoch.  # noqa: E501

        :return: The last_modified of this DataCenterGateway.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this DataCenterGateway.

        Timestamp of the last updated to the data center gateway, in milliseconds since epoch.  # noqa: E501

        :param last_modified: The last_modified of this DataCenterGateway.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def certificate(self):
        """Gets the certificate of this DataCenterGateway.  # noqa: E501

        Certificate of the data center gateway. Only returned when creating a new Data Center Gateway.  # noqa: E501

        :return: The certificate of this DataCenterGateway.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this DataCenterGateway.

        Certificate of the data center gateway. Only returned when creating a new Data Center Gateway.  # noqa: E501

        :param certificate: The certificate of this DataCenterGateway.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def private_key(self):
        """Gets the private_key of this DataCenterGateway.  # noqa: E501

        Private key of the data center gateway. Only returned when creating a new Data Center Gateway.  # noqa: E501

        :return: The private_key of this DataCenterGateway.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this DataCenterGateway.

        Private key of the data center gateway. Only returned when creating a new Data Center Gateway.  # noqa: E501

        :param private_key: The private_key of this DataCenterGateway.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def root_ca(self):
        """Gets the root_ca of this DataCenterGateway.  # noqa: E501

        Root CA for data center gateway service. Only returned when creating a new Data Center Gateway.  # noqa: E501

        :return: The root_ca of this DataCenterGateway.  # noqa: E501
        :rtype: str
        """
        return self._root_ca

    @root_ca.setter
    def root_ca(self, root_ca):
        """Sets the root_ca of this DataCenterGateway.

        Root CA for data center gateway service. Only returned when creating a new Data Center Gateway.  # noqa: E501

        :param root_ca: The root_ca of this DataCenterGateway.  # noqa: E501
        :type: str
        """

        self._root_ca = root_ca

    @property
    def id(self):
        """Gets the id of this DataCenterGateway.  # noqa: E501

        ID of data center gateway.  # noqa: E501

        :return: The id of this DataCenterGateway.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataCenterGateway.

        ID of data center gateway.  # noqa: E501

        :param id: The id of this DataCenterGateway.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataCenterGateway, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCenterGateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

