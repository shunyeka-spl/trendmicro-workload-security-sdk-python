# coding: utf-8

"""
    Trend Micro Workload Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 50.0.810
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepsecurity.models.trust_rule_attribute import TrustRuleAttribute  # noqa: F401,E501


class ApplicationControlTrustRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'description': 'str',
        'is_assigned': 'bool',
        'created_time': 'int',
        'last_updated_time': 'int',
        'ruleset_ids': 'list[int]',
        'attributes': 'list[TrustRuleAttribute]',
        'id': 'int'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'description': 'description',
        'is_assigned': 'isAssigned',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'ruleset_ids': 'rulesetIDs',
        'attributes': 'attributes',
        'id': 'ID'
    }

    def __init__(self, type=None, name=None, description=None, is_assigned=None, created_time=None, last_updated_time=None, ruleset_ids=None, attributes=None, id=None):  # noqa: E501
        """ApplicationControlTrustRule - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._name = None
        self._description = None
        self._is_assigned = None
        self._created_time = None
        self._last_updated_time = None
        self._ruleset_ids = None
        self._attributes = None
        self._id = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if is_assigned is not None:
            self.is_assigned = is_assigned
        if created_time is not None:
            self.created_time = created_time
        if last_updated_time is not None:
            self.last_updated_time = last_updated_time
        if ruleset_ids is not None:
            self.ruleset_ids = ruleset_ids
        if attributes is not None:
            self.attributes = attributes
        if id is not None:
            self.id = id

    @property
    def type(self):
        """Gets the type of this ApplicationControlTrustRule.  # noqa: E501

        Type of the rule. Searchable as Choice.  # noqa: E501

        :return: The type of this ApplicationControlTrustRule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApplicationControlTrustRule.

        Type of the rule. Searchable as Choice.  # noqa: E501

        :param type: The type of this ApplicationControlTrustRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["allowFromSourceTarget", "allowFromSource", "allowByTarget", "ignoreFromSource"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this ApplicationControlTrustRule.  # noqa: E501

        Name of the trust rule. Searchable as String.  # noqa: E501

        :return: The name of this ApplicationControlTrustRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationControlTrustRule.

        Name of the trust rule. Searchable as String.  # noqa: E501

        :param name: The name of this ApplicationControlTrustRule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ApplicationControlTrustRule.  # noqa: E501

        Description of the trust rule. Searchable as String.  # noqa: E501

        :return: The description of this ApplicationControlTrustRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationControlTrustRule.

        Description of the trust rule. Searchable as String.  # noqa: E501

        :param description: The description of this ApplicationControlTrustRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_assigned(self):
        """Gets the is_assigned of this ApplicationControlTrustRule.  # noqa: E501

        Whether the rule is assigned to any rulesets  # noqa: E501

        :return: The is_assigned of this ApplicationControlTrustRule.  # noqa: E501
        :rtype: bool
        """
        return self._is_assigned

    @is_assigned.setter
    def is_assigned(self, is_assigned):
        """Sets the is_assigned of this ApplicationControlTrustRule.

        Whether the rule is assigned to any rulesets  # noqa: E501

        :param is_assigned: The is_assigned of this ApplicationControlTrustRule.  # noqa: E501
        :type: bool
        """

        self._is_assigned = is_assigned

    @property
    def created_time(self):
        """Gets the created_time of this ApplicationControlTrustRule.  # noqa: E501

        Timestamp of the trust rule's creation, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :return: The created_time of this ApplicationControlTrustRule.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ApplicationControlTrustRule.

        Timestamp of the trust rule's creation, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :param created_time: The created_time of this ApplicationControlTrustRule.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this ApplicationControlTrustRule.  # noqa: E501

        Timestamp of when the trust rule was last updated, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :return: The last_updated_time of this ApplicationControlTrustRule.  # noqa: E501
        :rtype: int
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this ApplicationControlTrustRule.

        Timestamp of when the trust rule was last updated, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :param last_updated_time: The last_updated_time of this ApplicationControlTrustRule.  # noqa: E501
        :type: int
        """

        self._last_updated_time = last_updated_time

    @property
    def ruleset_ids(self):
        """Gets the ruleset_ids of this ApplicationControlTrustRule.  # noqa: E501

        IDs of all rulesets that the rule is assigned to.  # noqa: E501

        :return: The ruleset_ids of this ApplicationControlTrustRule.  # noqa: E501
        :rtype: list[int]
        """
        return self._ruleset_ids

    @ruleset_ids.setter
    def ruleset_ids(self, ruleset_ids):
        """Sets the ruleset_ids of this ApplicationControlTrustRule.

        IDs of all rulesets that the rule is assigned to.  # noqa: E501

        :param ruleset_ids: The ruleset_ids of this ApplicationControlTrustRule.  # noqa: E501
        :type: list[int]
        """

        self._ruleset_ids = ruleset_ids

    @property
    def attributes(self):
        """Gets the attributes of this ApplicationControlTrustRule.  # noqa: E501

        Attributes that define the trust rule.  # noqa: E501

        :return: The attributes of this ApplicationControlTrustRule.  # noqa: E501
        :rtype: list[TrustRuleAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ApplicationControlTrustRule.

        Attributes that define the trust rule.  # noqa: E501

        :param attributes: The attributes of this ApplicationControlTrustRule.  # noqa: E501
        :type: list[TrustRuleAttribute]
        """

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this ApplicationControlTrustRule.  # noqa: E501

        ID of the trust rule. Searchable as ID.  # noqa: E501

        :return: The id of this ApplicationControlTrustRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationControlTrustRule.

        ID of the trust rule. Searchable as ID.  # noqa: E501

        :param id: The id of this ApplicationControlTrustRule.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationControlTrustRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationControlTrustRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

