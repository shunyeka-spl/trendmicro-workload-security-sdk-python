# coding: utf-8

"""
    Trend Micro Workload Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 50.0.810
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MovedComputer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'move_guid': 'str',
        'computer_id': 'int',
        'moved': 'int',
        'created': 'int',
        'id': 'int'
    }

    attribute_map = {
        'move_guid': 'moveGUID',
        'computer_id': 'computerID',
        'moved': 'moved',
        'created': 'created',
        'id': 'ID'
    }

    def __init__(self, move_guid=None, computer_id=None, moved=None, created=None, id=None):  # noqa: E501
        """MovedComputer - a model defined in Swagger"""  # noqa: E501

        self._move_guid = None
        self._computer_id = None
        self._moved = None
        self._created = None
        self._id = None
        self.discriminator = None

        if move_guid is not None:
            self.move_guid = move_guid
        if computer_id is not None:
            self.computer_id = computer_id
        if moved is not None:
            self.moved = moved
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id

    @property
    def move_guid(self):
        """Gets the move_guid of this MovedComputer.  # noqa: E501

        GUID of the move of the computer. Searchable as String.  # noqa: E501

        :return: The move_guid of this MovedComputer.  # noqa: E501
        :rtype: str
        """
        return self._move_guid

    @move_guid.setter
    def move_guid(self, move_guid):
        """Sets the move_guid of this MovedComputer.

        GUID of the move of the computer. Searchable as String.  # noqa: E501

        :param move_guid: The move_guid of this MovedComputer.  # noqa: E501
        :type: str
        """

        self._move_guid = move_guid

    @property
    def computer_id(self):
        """Gets the computer_id of this MovedComputer.  # noqa: E501

        ID of the computer. Searchable as Numeric.  # noqa: E501

        :return: The computer_id of this MovedComputer.  # noqa: E501
        :rtype: int
        """
        return self._computer_id

    @computer_id.setter
    def computer_id(self, computer_id):
        """Sets the computer_id of this MovedComputer.

        ID of the computer. Searchable as Numeric.  # noqa: E501

        :param computer_id: The computer_id of this MovedComputer.  # noqa: E501
        :type: int
        """

        self._computer_id = computer_id

    @property
    def moved(self):
        """Gets the moved of this MovedComputer.  # noqa: E501

        Timestamp when the computer was moved, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :return: The moved of this MovedComputer.  # noqa: E501
        :rtype: int
        """
        return self._moved

    @moved.setter
    def moved(self, moved):
        """Sets the moved of this MovedComputer.

        Timestamp when the computer was moved, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :param moved: The moved of this MovedComputer.  # noqa: E501
        :type: int
        """

        self._moved = moved

    @property
    def created(self):
        """Gets the created of this MovedComputer.  # noqa: E501

        Timestamp when the MovedComputer was created, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :return: The created of this MovedComputer.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MovedComputer.

        Timestamp when the MovedComputer was created, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :param created: The created of this MovedComputer.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this MovedComputer.  # noqa: E501

        ID of the MovedComputer. Searchable as ID.  # noqa: E501

        :return: The id of this MovedComputer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MovedComputer.

        ID of the MovedComputer. Searchable as ID.  # noqa: E501

        :param id: The id of this MovedComputer.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MovedComputer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MovedComputer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

