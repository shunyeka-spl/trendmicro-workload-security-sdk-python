# coding: utf-8

"""
    Trend Micro Workload Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 50.0.810
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SAP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entitlement_state': 'bool',
        'license_state': 'str',
        'expires': 'datetime',
        'customer_account_id': 'str'
    }

    attribute_map = {
        'entitlement_state': 'entitlementState',
        'license_state': 'licenseState',
        'expires': 'expires',
        'customer_account_id': 'customerAccountID'
    }

    def __init__(self, entitlement_state=None, license_state=None, expires=None, customer_account_id=None):  # noqa: E501
        """SAP - a model defined in Swagger"""  # noqa: E501

        self._entitlement_state = None
        self._license_state = None
        self._expires = None
        self._customer_account_id = None
        self.discriminator = None

        if entitlement_state is not None:
            self.entitlement_state = entitlement_state
        if license_state is not None:
            self.license_state = license_state
        if expires is not None:
            self.expires = expires
        if customer_account_id is not None:
            self.customer_account_id = customer_account_id

    @property
    def entitlement_state(self):
        """Gets the entitlement_state of this SAP.  # noqa: E501

        Entitlement state.  # noqa: E501

        :return: The entitlement_state of this SAP.  # noqa: E501
        :rtype: bool
        """
        return self._entitlement_state

    @entitlement_state.setter
    def entitlement_state(self, entitlement_state):
        """Sets the entitlement_state of this SAP.

        Entitlement state.  # noqa: E501

        :param entitlement_state: The entitlement_state of this SAP.  # noqa: E501
        :type: bool
        """

        self._entitlement_state = entitlement_state

    @property
    def license_state(self):
        """Gets the license_state of this SAP.  # noqa: E501

        SAP license state. Valid values are 'licensed' and 'trial'  # noqa: E501

        :return: The license_state of this SAP.  # noqa: E501
        :rtype: str
        """
        return self._license_state

    @license_state.setter
    def license_state(self, license_state):
        """Sets the license_state of this SAP.

        SAP license state. Valid values are 'licensed' and 'trial'  # noqa: E501

        :param license_state: The license_state of this SAP.  # noqa: E501
        :type: str
        """

        self._license_state = license_state

    @property
    def expires(self):
        """Gets the expires of this SAP.  # noqa: E501

        The entitlement expiration date.  # noqa: E501

        :return: The expires of this SAP.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this SAP.

        The entitlement expiration date.  # noqa: E501

        :param expires: The expires of this SAP.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def customer_account_id(self):
        """Gets the customer_account_id of this SAP.  # noqa: E501

        customer Account ID of the tenant.  # noqa: E501

        :return: The customer_account_id of this SAP.  # noqa: E501
        :rtype: str
        """
        return self._customer_account_id

    @customer_account_id.setter
    def customer_account_id(self, customer_account_id):
        """Sets the customer_account_id of this SAP.

        customer Account ID of the tenant.  # noqa: E501

        :param customer_account_id: The customer_account_id of this SAP.  # noqa: E501
        :type: str
        """

        self._customer_account_id = customer_account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SAP, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SAP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

