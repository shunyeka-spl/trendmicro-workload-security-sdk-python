# coding: utf-8

"""
    Trend Micro Workload Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 50.0.810
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InetAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'canonical_host_name': 'str',
        'multicast_address': 'bool',
        'any_local_address': 'bool',
        'loopback_address': 'bool',
        'link_local_address': 'bool',
        'site_local_address': 'bool',
        'mcglobal': 'bool',
        'mcnode_local': 'bool',
        'mclink_local': 'bool',
        'mcsite_local': 'bool',
        'mcorg_local': 'bool',
        'address': 'list[str]',
        'host_address': 'str',
        'host_name': 'str'
    }

    attribute_map = {
        'canonical_host_name': 'canonicalHostName',
        'multicast_address': 'multicastAddress',
        'any_local_address': 'anyLocalAddress',
        'loopback_address': 'loopbackAddress',
        'link_local_address': 'linkLocalAddress',
        'site_local_address': 'siteLocalAddress',
        'mcglobal': 'mcglobal',
        'mcnode_local': 'mcnodeLocal',
        'mclink_local': 'mclinkLocal',
        'mcsite_local': 'mcsiteLocal',
        'mcorg_local': 'mcorgLocal',
        'address': 'address',
        'host_address': 'hostAddress',
        'host_name': 'hostName'
    }

    def __init__(self, canonical_host_name=None, multicast_address=None, any_local_address=None, loopback_address=None, link_local_address=None, site_local_address=None, mcglobal=None, mcnode_local=None, mclink_local=None, mcsite_local=None, mcorg_local=None, address=None, host_address=None, host_name=None):  # noqa: E501
        """InetAddress - a model defined in Swagger"""  # noqa: E501

        self._canonical_host_name = None
        self._multicast_address = None
        self._any_local_address = None
        self._loopback_address = None
        self._link_local_address = None
        self._site_local_address = None
        self._mcglobal = None
        self._mcnode_local = None
        self._mclink_local = None
        self._mcsite_local = None
        self._mcorg_local = None
        self._address = None
        self._host_address = None
        self._host_name = None
        self.discriminator = None

        if canonical_host_name is not None:
            self.canonical_host_name = canonical_host_name
        if multicast_address is not None:
            self.multicast_address = multicast_address
        if any_local_address is not None:
            self.any_local_address = any_local_address
        if loopback_address is not None:
            self.loopback_address = loopback_address
        if link_local_address is not None:
            self.link_local_address = link_local_address
        if site_local_address is not None:
            self.site_local_address = site_local_address
        if mcglobal is not None:
            self.mcglobal = mcglobal
        if mcnode_local is not None:
            self.mcnode_local = mcnode_local
        if mclink_local is not None:
            self.mclink_local = mclink_local
        if mcsite_local is not None:
            self.mcsite_local = mcsite_local
        if mcorg_local is not None:
            self.mcorg_local = mcorg_local
        if address is not None:
            self.address = address
        if host_address is not None:
            self.host_address = host_address
        if host_name is not None:
            self.host_name = host_name

    @property
    def canonical_host_name(self):
        """Gets the canonical_host_name of this InetAddress.  # noqa: E501


        :return: The canonical_host_name of this InetAddress.  # noqa: E501
        :rtype: str
        """
        return self._canonical_host_name

    @canonical_host_name.setter
    def canonical_host_name(self, canonical_host_name):
        """Sets the canonical_host_name of this InetAddress.


        :param canonical_host_name: The canonical_host_name of this InetAddress.  # noqa: E501
        :type: str
        """

        self._canonical_host_name = canonical_host_name

    @property
    def multicast_address(self):
        """Gets the multicast_address of this InetAddress.  # noqa: E501


        :return: The multicast_address of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._multicast_address

    @multicast_address.setter
    def multicast_address(self, multicast_address):
        """Sets the multicast_address of this InetAddress.


        :param multicast_address: The multicast_address of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._multicast_address = multicast_address

    @property
    def any_local_address(self):
        """Gets the any_local_address of this InetAddress.  # noqa: E501


        :return: The any_local_address of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._any_local_address

    @any_local_address.setter
    def any_local_address(self, any_local_address):
        """Sets the any_local_address of this InetAddress.


        :param any_local_address: The any_local_address of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._any_local_address = any_local_address

    @property
    def loopback_address(self):
        """Gets the loopback_address of this InetAddress.  # noqa: E501


        :return: The loopback_address of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._loopback_address

    @loopback_address.setter
    def loopback_address(self, loopback_address):
        """Sets the loopback_address of this InetAddress.


        :param loopback_address: The loopback_address of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._loopback_address = loopback_address

    @property
    def link_local_address(self):
        """Gets the link_local_address of this InetAddress.  # noqa: E501


        :return: The link_local_address of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._link_local_address

    @link_local_address.setter
    def link_local_address(self, link_local_address):
        """Sets the link_local_address of this InetAddress.


        :param link_local_address: The link_local_address of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._link_local_address = link_local_address

    @property
    def site_local_address(self):
        """Gets the site_local_address of this InetAddress.  # noqa: E501


        :return: The site_local_address of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._site_local_address

    @site_local_address.setter
    def site_local_address(self, site_local_address):
        """Sets the site_local_address of this InetAddress.


        :param site_local_address: The site_local_address of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._site_local_address = site_local_address

    @property
    def mcglobal(self):
        """Gets the mcglobal of this InetAddress.  # noqa: E501


        :return: The mcglobal of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._mcglobal

    @mcglobal.setter
    def mcglobal(self, mcglobal):
        """Sets the mcglobal of this InetAddress.


        :param mcglobal: The mcglobal of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._mcglobal = mcglobal

    @property
    def mcnode_local(self):
        """Gets the mcnode_local of this InetAddress.  # noqa: E501


        :return: The mcnode_local of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._mcnode_local

    @mcnode_local.setter
    def mcnode_local(self, mcnode_local):
        """Sets the mcnode_local of this InetAddress.


        :param mcnode_local: The mcnode_local of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._mcnode_local = mcnode_local

    @property
    def mclink_local(self):
        """Gets the mclink_local of this InetAddress.  # noqa: E501


        :return: The mclink_local of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._mclink_local

    @mclink_local.setter
    def mclink_local(self, mclink_local):
        """Sets the mclink_local of this InetAddress.


        :param mclink_local: The mclink_local of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._mclink_local = mclink_local

    @property
    def mcsite_local(self):
        """Gets the mcsite_local of this InetAddress.  # noqa: E501


        :return: The mcsite_local of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._mcsite_local

    @mcsite_local.setter
    def mcsite_local(self, mcsite_local):
        """Sets the mcsite_local of this InetAddress.


        :param mcsite_local: The mcsite_local of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._mcsite_local = mcsite_local

    @property
    def mcorg_local(self):
        """Gets the mcorg_local of this InetAddress.  # noqa: E501


        :return: The mcorg_local of this InetAddress.  # noqa: E501
        :rtype: bool
        """
        return self._mcorg_local

    @mcorg_local.setter
    def mcorg_local(self, mcorg_local):
        """Sets the mcorg_local of this InetAddress.


        :param mcorg_local: The mcorg_local of this InetAddress.  # noqa: E501
        :type: bool
        """

        self._mcorg_local = mcorg_local

    @property
    def address(self):
        """Gets the address of this InetAddress.  # noqa: E501


        :return: The address of this InetAddress.  # noqa: E501
        :rtype: list[str]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InetAddress.


        :param address: The address of this InetAddress.  # noqa: E501
        :type: list[str]
        """

        self._address = address

    @property
    def host_address(self):
        """Gets the host_address of this InetAddress.  # noqa: E501


        :return: The host_address of this InetAddress.  # noqa: E501
        :rtype: str
        """
        return self._host_address

    @host_address.setter
    def host_address(self, host_address):
        """Sets the host_address of this InetAddress.


        :param host_address: The host_address of this InetAddress.  # noqa: E501
        :type: str
        """

        self._host_address = host_address

    @property
    def host_name(self):
        """Gets the host_name of this InetAddress.  # noqa: E501


        :return: The host_name of this InetAddress.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this InetAddress.


        :param host_name: The host_name of this InetAddress.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InetAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InetAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

