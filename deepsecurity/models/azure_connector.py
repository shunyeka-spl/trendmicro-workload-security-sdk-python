# coding: utf-8

"""
    Trend Micro Workload Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 50.0.810
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AzureConnector(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'azure_tenant_id': 'str',
        'subscription_id': 'str',
        'azure_ad_application_id': 'str',
        'azure_ad_application_secret': 'str',
        'resource_api_end_point': 'str',
        'login_api_end_point': 'str',
        'last_sync_time': 'int',
        'id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'azure_tenant_id': 'azureTenantID',
        'subscription_id': 'subscriptionID',
        'azure_ad_application_id': 'azureAdApplicationID',
        'azure_ad_application_secret': 'azureAdApplicationSecret',
        'resource_api_end_point': 'resourceApiEndPoint',
        'login_api_end_point': 'loginApiEndPoint',
        'last_sync_time': 'lastSyncTime',
        'id': 'ID'
    }

    def __init__(self, name=None, azure_tenant_id=None, subscription_id=None, azure_ad_application_id=None, azure_ad_application_secret=None, resource_api_end_point=None, login_api_end_point=None, last_sync_time=None, id=None):  # noqa: E501
        """AzureConnector - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._azure_tenant_id = None
        self._subscription_id = None
        self._azure_ad_application_id = None
        self._azure_ad_application_secret = None
        self._resource_api_end_point = None
        self._login_api_end_point = None
        self._last_sync_time = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if azure_tenant_id is not None:
            self.azure_tenant_id = azure_tenant_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if azure_ad_application_id is not None:
            self.azure_ad_application_id = azure_ad_application_id
        if azure_ad_application_secret is not None:
            self.azure_ad_application_secret = azure_ad_application_secret
        if resource_api_end_point is not None:
            self.resource_api_end_point = resource_api_end_point
        if login_api_end_point is not None:
            self.login_api_end_point = login_api_end_point
        if last_sync_time is not None:
            self.last_sync_time = last_sync_time
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this AzureConnector.  # noqa: E501

        The Azure Connector's display name in DSM. Searchable as String.  # noqa: E501

        :return: The name of this AzureConnector.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AzureConnector.

        The Azure Connector's display name in DSM. Searchable as String.  # noqa: E501

        :param name: The name of this AzureConnector.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def azure_tenant_id(self):
        """Gets the azure_tenant_id of this AzureConnector.  # noqa: E501

        The Azure Tenant/Active Directory ID. Searchable as String.  # noqa: E501

        :return: The azure_tenant_id of this AzureConnector.  # noqa: E501
        :rtype: str
        """
        return self._azure_tenant_id

    @azure_tenant_id.setter
    def azure_tenant_id(self, azure_tenant_id):
        """Sets the azure_tenant_id of this AzureConnector.

        The Azure Tenant/Active Directory ID. Searchable as String.  # noqa: E501

        :param azure_tenant_id: The azure_tenant_id of this AzureConnector.  # noqa: E501
        :type: str
        """

        self._azure_tenant_id = azure_tenant_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this AzureConnector.  # noqa: E501

        The Azure Subscription ID. Searchable as String.  # noqa: E501

        :return: The subscription_id of this AzureConnector.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this AzureConnector.

        The Azure Subscription ID. Searchable as String.  # noqa: E501

        :param subscription_id: The subscription_id of this AzureConnector.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def azure_ad_application_id(self):
        """Gets the azure_ad_application_id of this AzureConnector.  # noqa: E501

        The Azure Active Directory Application ID. Searchable as String.  # noqa: E501

        :return: The azure_ad_application_id of this AzureConnector.  # noqa: E501
        :rtype: str
        """
        return self._azure_ad_application_id

    @azure_ad_application_id.setter
    def azure_ad_application_id(self, azure_ad_application_id):
        """Sets the azure_ad_application_id of this AzureConnector.

        The Azure Active Directory Application ID. Searchable as String.  # noqa: E501

        :param azure_ad_application_id: The azure_ad_application_id of this AzureConnector.  # noqa: E501
        :type: str
        """

        self._azure_ad_application_id = azure_ad_application_id

    @property
    def azure_ad_application_secret(self):
        """Gets the azure_ad_application_secret of this AzureConnector.  # noqa: E501

        The Azure Active Directory Application secret/password. Not present in returned objects.  # noqa: E501

        :return: The azure_ad_application_secret of this AzureConnector.  # noqa: E501
        :rtype: str
        """
        return self._azure_ad_application_secret

    @azure_ad_application_secret.setter
    def azure_ad_application_secret(self, azure_ad_application_secret):
        """Sets the azure_ad_application_secret of this AzureConnector.

        The Azure Active Directory Application secret/password. Not present in returned objects.  # noqa: E501

        :param azure_ad_application_secret: The azure_ad_application_secret of this AzureConnector.  # noqa: E501
        :type: str
        """

        self._azure_ad_application_secret = azure_ad_application_secret

    @property
    def resource_api_end_point(self):
        """Gets the resource_api_end_point of this AzureConnector.  # noqa: E501

        The optional Azure Resource REST API endpoint. Will auto detect by DSM VM location if not provided. This is an advanced option used if you want to access private or confidential cloud. Be aware that managing Azure Government computers outside Azure Government would break ITAR compliance.  # noqa: E501

        :return: The resource_api_end_point of this AzureConnector.  # noqa: E501
        :rtype: str
        """
        return self._resource_api_end_point

    @resource_api_end_point.setter
    def resource_api_end_point(self, resource_api_end_point):
        """Sets the resource_api_end_point of this AzureConnector.

        The optional Azure Resource REST API endpoint. Will auto detect by DSM VM location if not provided. This is an advanced option used if you want to access private or confidential cloud. Be aware that managing Azure Government computers outside Azure Government would break ITAR compliance.  # noqa: E501

        :param resource_api_end_point: The resource_api_end_point of this AzureConnector.  # noqa: E501
        :type: str
        """

        self._resource_api_end_point = resource_api_end_point

    @property
    def login_api_end_point(self):
        """Gets the login_api_end_point of this AzureConnector.  # noqa: E501

        The optional Azure Active Directory Login/Authentication API endpoint. Will auto detect by DSM VM location if not provided. This is an advanced option used if you want to access private or confidential cloud. Be aware that managing Azure Government computers outside Azure Government would break ITAR compliance.  # noqa: E501

        :return: The login_api_end_point of this AzureConnector.  # noqa: E501
        :rtype: str
        """
        return self._login_api_end_point

    @login_api_end_point.setter
    def login_api_end_point(self, login_api_end_point):
        """Sets the login_api_end_point of this AzureConnector.

        The optional Azure Active Directory Login/Authentication API endpoint. Will auto detect by DSM VM location if not provided. This is an advanced option used if you want to access private or confidential cloud. Be aware that managing Azure Government computers outside Azure Government would break ITAR compliance.  # noqa: E501

        :param login_api_end_point: The login_api_end_point of this AzureConnector.  # noqa: E501
        :type: str
        """

        self._login_api_end_point = login_api_end_point

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this AzureConnector.  # noqa: E501

        Timestamp of the last time the Azure Connector was successfully synchronized, in milliseconds since epoch.  # noqa: E501

        :return: The last_sync_time of this AzureConnector.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this AzureConnector.

        Timestamp of the last time the Azure Connector was successfully synchronized, in milliseconds since epoch.  # noqa: E501

        :param last_sync_time: The last_sync_time of this AzureConnector.  # noqa: E501
        :type: int
        """

        self._last_sync_time = last_sync_time

    @property
    def id(self):
        """Gets the id of this AzureConnector.  # noqa: E501

        Azure Connector ID. Searchable as ID.  # noqa: E501

        :return: The id of this AzureConnector.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AzureConnector.

        Azure Connector ID. Searchable as ID.  # noqa: E501

        :param id: The id of this AzureConnector.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AzureConnector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureConnector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

