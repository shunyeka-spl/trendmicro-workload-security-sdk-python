# coding: utf-8

"""
    Trend Micro Workload Security API

    Copyright 2018 - 2022 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Workload Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Workload Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 50.0.810
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TrustRuleset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'version': 'int',
        'created_time': 'int',
        'last_updated_time': 'int',
        'usage_count': 'int',
        'id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'version': 'version',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'usage_count': 'usageCount',
        'id': 'ID'
    }

    def __init__(self, name=None, description=None, version=None, created_time=None, last_updated_time=None, usage_count=None, id=None):  # noqa: E501
        """TrustRuleset - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._version = None
        self._created_time = None
        self._last_updated_time = None
        self._usage_count = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version
        if created_time is not None:
            self.created_time = created_time
        if last_updated_time is not None:
            self.last_updated_time = last_updated_time
        if usage_count is not None:
            self.usage_count = usage_count
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this TrustRuleset.  # noqa: E501

        Name of the trust ruleset. Searchable as String.  # noqa: E501

        :return: The name of this TrustRuleset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrustRuleset.

        Name of the trust ruleset. Searchable as String.  # noqa: E501

        :param name: The name of this TrustRuleset.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TrustRuleset.  # noqa: E501

        Description of the trust ruleset. Searchable as String.  # noqa: E501

        :return: The description of this TrustRuleset.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrustRuleset.

        Description of the trust ruleset. Searchable as String.  # noqa: E501

        :param description: The description of this TrustRuleset.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """Gets the version of this TrustRuleset.  # noqa: E501

        Version number of the trust ruleset. Incremented by one whenever the ruleset rules are modified. Searchable as Numeric.  # noqa: E501

        :return: The version of this TrustRuleset.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TrustRuleset.

        Version number of the trust ruleset. Incremented by one whenever the ruleset rules are modified. Searchable as Numeric.  # noqa: E501

        :param version: The version of this TrustRuleset.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def created_time(self):
        """Gets the created_time of this TrustRuleset.  # noqa: E501

        Timestamp of the trust ruleset's creation, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :return: The created_time of this TrustRuleset.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this TrustRuleset.

        Timestamp of the trust ruleset's creation, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :param created_time: The created_time of this TrustRuleset.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this TrustRuleset.  # noqa: E501

        Timestamp of when the trust ruleset was last updated, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :return: The last_updated_time of this TrustRuleset.  # noqa: E501
        :rtype: int
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this TrustRuleset.

        Timestamp of when the trust ruleset was last updated, in milliseconds since epoch. Searchable as Date.  # noqa: E501

        :param last_updated_time: The last_updated_time of this TrustRuleset.  # noqa: E501
        :type: int
        """

        self._last_updated_time = last_updated_time

    @property
    def usage_count(self):
        """Gets the usage_count of this TrustRuleset.  # noqa: E501

        Count for trust ruleset usage.  # noqa: E501

        :return: The usage_count of this TrustRuleset.  # noqa: E501
        :rtype: int
        """
        return self._usage_count

    @usage_count.setter
    def usage_count(self, usage_count):
        """Sets the usage_count of this TrustRuleset.

        Count for trust ruleset usage.  # noqa: E501

        :param usage_count: The usage_count of this TrustRuleset.  # noqa: E501
        :type: int
        """

        self._usage_count = usage_count

    @property
    def id(self):
        """Gets the id of this TrustRuleset.  # noqa: E501

        ID of the trust ruleset. Searchable as ID.  # noqa: E501

        :return: The id of this TrustRuleset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrustRuleset.

        ID of the trust ruleset. Searchable as ID.  # noqa: E501

        :param id: The id of this TrustRuleset.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrustRuleset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrustRuleset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

